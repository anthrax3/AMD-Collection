<!doctype html>
<head>
    <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-git.css" type="text/css" media="screen">
    <script type="text/javascript" src="http://code.jquery.com/qunit/qunit-git.js"></script>

    <script type="text/javascript" src="../../node_modules/requirejs/require.js"></script>
    <script>
        require([ "../looper" ], function( looper ) {

            //setup & initialize
            test( "setup & initialize", function(){
                var methods = [ 'isRunning', 'state', 'start', 'stop', 'rate', 'add', 'remove', 'clear' ];

                //confirm expected methods
                for ( var method in methods ){
                    ok( typeof looper[ methods[ method ] ] === 'function', 'looper includes the "' + methods[ method ] + '" method' )
                }
            });

            // isRunning
            test( 'method - "isRunning"', function(){
                looper.start();
                strictEqual( looper.isRunning(), true, 'looper is running' );
                looper.stop();
                strictEqual( looper.isRunning(), false, 'looper is stopped' );
            });

            // state
            test( 'method - "state"', function(){
                looper.start();
                strictEqual( looper.state(), 'running', 'looper state is running' );
                looper.stop();
                strictEqual( looper.state(), 'stopped', 'looper state is stopped' );
            });

            // start
            test( 'method - "start"', function(){
            });


            //start & run loop
            test( 'start & run loop', function(){
                var n = 0,
                    loopLength = 10,
                    testDuration = 400,
                    startTime = Date.now(),
                    endTime = Date.now(),
                    testFunc1 = function(){ n = n + 1; endTime = Date.now(); };

                looper.start( testFunc1, loopLength );

                strictEqual( looper.state(), 'running', 'looper state is correct' );
                strictEqual( looper.rate(), loopLength, 'looper is running at the expected rate' );
                stop();

                setTimeout(function(){
                    looper.stop();

                    strictEqual( looper.state(), 'stopped', 'looper state is correct' );
                    ok( n > 0 && n <= ( testDuration / loopLength ), 'looper ran ' + n + ' times' );
                    ok( endTime - startTime, 'looper ran in ' + ( endTime - startTime ) + ' miliseconds' );

                    looper.clear();
                    start();
                }, testDuration );
            });

            //add & remove multiple functions to looper
            asyncTest( 'add & remove functions to running loop', function(){
                var n = 0,
                    nGoal = 25,
                    x = 0,
                    xGoal = 5,
                    y = "",
                    yGoal = 'awwww yeaaaah!',
                    isRunning = false,
                    loopLength = 10,
                    testDuration = 500,
                    testFunc1Added = false,
                    testFunc1 = function(){ isRunning = true; testFunc1Added = true; n = n + 1; if ( n === nGoal ) { return false; } },
                    testFunc2Added = false,
                    testFunc2 = function(){ isRunning = true; testFunc2Added = true; x = x + 1; if ( x === xGoal ) { return false; } },
                    testFunc3Added = false,
                    testFunc3 = function(){ isRunning = true; testFunc3Added = true; if ( n === 10 ) { y = yGoal; } };

                looper.add( testFunc3 );

                strictEqual( looper.isRunning(), false, 'looper is stopped @ ' + Date.now() );
                strictEqual( looper.state(), 'stopped', 'looper is state is correct' );

                looper.start( testFunc1, loopLength );

                strictEqual( looper.isRunning(), true, 'looper is running @ ' + Date.now() );
                strictEqual( looper.state(), 'running', 'looper state is correct' );

                setTimeout(function(){
                    looper.add( testFunc2 );
                    strictEqual( testFunc1Added && testFunc3Added, true, 'first two functions added to loop successfully' );
                    strictEqual( looper.isRunning(), true, 'looper is running @ ' + Date.now() );
                    strictEqual( looper.state(), 'running', 'looper state is correct' );
                }, 200 );

                setTimeout(function(){
                    strictEqual( testFunc2Added, true, 'third function added to loop successfully' );
                    looper.stop();
                    strictEqual( looper.isRunning(), false, 'looper is stopped @ ' + Date.now() );
                    strictEqual( looper.state(), 'stopped', 'looper is state is correct' );
                }, 400 );

                setTimeout(function(){
                    ok( n === nGoal, 'testFunc1 ran successfully - n = ' + n );
                    ok( x === xGoal, 'testFunc2 ran successfully - x = ' + x );
                    ok( y === yGoal, 'testFunc2 ran successfully - y = ' + yGoal );

                    start();
                }, testDuration );
            });

        });
    </script>
</head>
<body>
    <h1 id="qunit-header">Looper AMD Module: Test Suite</h1>
    <h2 id="qunit-banner"></h2>
    <div id="qunit-testrunner-toolbar"></div>
    <h2 id="qunit-userAgent"></h2>
    <ol id="qunit-tests"></ol>
</body>
</html>
