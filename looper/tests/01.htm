<!doctype html>
<head>
	<link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-git.css" type="text/css" media="screen">
	<script type="text/javascript" src="http://code.jquery.com/qunit/qunit-git.js"></script>

	<script type="text/javascript" src="../../node_modules/requirejs/require.js"></script>
	<script>
		require([ '../looper' ], function( looper ) {

			test( "basics", function(){
				var methods = [ 'isRunning', 'start', 'stop', 'rate', 'add', 'remove', 'clear' ];

				expect( 1 + methods.length );

				ok( window.location.protocol !== 'file:', 'Not running tests under the "file:" protocol' );

				for ( var method in methods ){
					ok( typeof looper[ methods[ method ] ] === 'function', 'looper includes the "' + methods[ method ] + '" method' )
				}
			});

			test( 'method - .isRunning()', function(){
				looper.start();
				strictEqual( looper.isRunning(), true, 'looper is running' );
				looper.stop();
				strictEqual( looper.isRunning(), false, 'looper is stopped' );
			});

			asyncTest( 'methods - .start() .stop() .clear()', function(){
				var runCounter = 0,
					testFunc = function(){
						runCounter = runCounter + 1;
						ok( true, 'added function on loop start' );
						return false;
					};

				looper.start( testFunc, 10 );

				strictEqual( looper.isRunning(), true, 'looper is running' );
				strictEqual( looper.rate(), 10, 'looper speed is correct' );

				setTimeout( function(){
					strictEqual( runCounter, 1, 'looper ran the test func the correct number of times ( returning false successfully removed test func from queue )' );
					looper.stop();
					strictEqual( looper.isRunning(), false, 'looper is stopped' );
					looper.start();
					looper.clear();
				}, 200 );

				setTimeout( function(){
					strictEqual( looper.isRunning(), true, 'looper restarted' );
					strictEqual( runCounter, 1, 'looper cleared' );
					looper.stop();
					start();
				}, 400 );

			});

			asyncTest( 'start & run loop', function(){
				var loopCount = 0,
					loopIterations = 20,
					loopSpeed = 10,
					lastRun = 0;

				var funcToLoop = function( date ){
						loopCount = loopCount + 1;
						//console.log( date.getTime() - lastRun );
						lastRun = date.getTime();
						if ( loopCount === loopIterations ){
							setTimeout(function(){
								runAssertions( date );
							}, 0);
							return false;
						}
					};

				var runAssertions = function( lastRun ){
					strictEqual( typeof lastRun.getTime, 'function', 'looper passed date object to looped function' );
					looper.stop();
					strictEqual( looper.isRunning(), false, 'looper is stopped @ ' + Date.now() );
					strictEqual( loopCount, loopIterations, 'looper ran the correct number of times' );
					start();
				};

				looper.start( funcToLoop, loopSpeed );

				strictEqual( looper.isRunning(), true, 'looper is running @ ' + Date.now() );
				strictEqual( looper.rate(), loopSpeed, 'looper is running at the expected rate' );
			});

			asyncTest( 'add & remove functions to running loop', function(){
				var loopSpeed = 10,
					testDuration = 500;

				var xOutput = 0;
				var xGoal = 5;
				var xWasAdded = false;
				var x = function(){
						xWasAdded = true;
						++ xOutput;

						if ( xOutput === xGoal ) {
							return false;
						}
					};

				var yOutput = '';
				var yGoal = 'awwww yeaaaah!';
				var yWasAdded = false;
				var y = function(){
						yWasAdded = true;

						if ( zOutput === 10 ) {
							yOutput = yGoal;
							return false;
						}
					};

				var zOutput = 0;
				var zGoal = 25;
				var zWasAdded = false;
				var z = function(){
						zWasAdded = true;
						++ zOutput;

						if ( zOutput === zGoal ) {
							return false;
						}
					};


				looper.add( y );

				strictEqual( looper.isRunning(), false, 'looper is stopped @ ' + Date.now() );

				looper.start( z, loopSpeed );

				strictEqual( looper.isRunning(), true, 'looper is running @ ' + Date.now() );

				setTimeout(function(){
					looper.add( x );
					strictEqual( zWasAdded && yWasAdded, true, 'functions "z" & "y" added to loop successfully' );
					strictEqual( looper.isRunning(), true, 'looper is running @ ' + Date.now() );
				}, 100 );

				setTimeout(function(){
					strictEqual( xWasAdded, true, 'function "x" added to loop successfully' );
					looper.stop();
					strictEqual( looper.isRunning(), false, 'looper is stopped @ ' + Date.now() );
				}, 300 );

				setTimeout(function(){
					strictEqual( xOutput, xGoal, 'x ran successfully' );
					strictEqual( yOutput, yGoal, 'y ran successfully' );
					strictEqual( zOutput, zGoal, 'z ran successfully' );
					start();
				}, testDuration );
			});
		});
	</script>
</head>
<body>
	<h1 id="qunit-header">Looper AMD Module: Test Suite</h1>
	<h2 id="qunit-banner"></h2>
	<div id="qunit-testrunner-toolbar"></div>
	<h2 id="qunit-userAgent"></h2>
	<ol id="qunit-tests"></ol>
</body>
</html>
